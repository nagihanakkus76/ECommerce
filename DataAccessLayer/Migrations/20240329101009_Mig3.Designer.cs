// <auto-generated />
using System;
using DataAccessLayer.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    [Migration("20240329101009_Mig3")]
    partial class Mig3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityLayer.Concrete.AddressTables.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AddressTables.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AddressTables.District", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AddressTables.Quarter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("DistrictID");

                    b.ToTable("Quarters");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AddressTables.UserAddress", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuarterID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("QuarterID");

                    b.HasIndex("UserID");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CommentRatingTables.ProductComment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Detail")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProductRatingID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProductRatingID");

                    b.ToTable("ProductComments");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CommentRatingTables.ProductRating", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("RatingTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("RatingTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("ProductRatings");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CommentRatingTables.RatingType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("DisplayText")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("RatingTypes");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CommentRatingTables.SellerComment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Detail")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SellerRatingID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SellerRatingID");

                    b.ToTable("SellerComments");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CommentRatingTables.SellerRating", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<int?>("RatingTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("RatingTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("SellerRatings");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Favorites.Favorite", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("EntityLayer.Concrete.OrderTables.CartDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("Piece")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("EntityLayer.Concrete.OrderTables.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("int");

                    b.Property<int?>("OrderStatusTypeID")
                        .HasColumnType("int");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<int?>("UserAddressID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("OrderStatusTypeID");

                    b.HasIndex("UserAddressID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EntityLayer.Concrete.OrderTables.OrderDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<double?>("DiscountAmount")
                        .HasColumnType("float");

                    b.Property<int?>("OrdeID")
                        .HasColumnType("int");

                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<int?>("Piece")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("EntityLayer.Concrete.OrderTables.OrderStatusType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("OrderStatusTypes");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PaymentTables.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CardNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PaymentTypeID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PaymentTables.PaymentOfOrder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("PaymentID");

                    b.ToTable("PaymentOfOrders");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PaymentTables.PaymentType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ProductTables.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentCategoryID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ProductTables.CategoryOfProduct", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ProductID");

                    b.ToTable("CategoryOfProducts");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ProductTables.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ProductTables.ProductImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ProductTables.ProductVideo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductVideos");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ProductTabless.ProductAttribute", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductAttributes");
                });

            modelBuilder.Entity("EntityLayer.Concrete.SellerTables.Seller", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserAddressID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserAddressID");

                    b.HasIndex("UserID");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("EntityLayer.Concrete.SellerTables.SellerOfProduct", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("SellerID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("SellerID");

                    b.ToTable("SellerOfProducts");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ShippingTables.Shipping", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EstimatedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ShipmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ShippingCompanyID")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ShippingCompanyID");

                    b.ToTable("Shippings");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ShippingTables.ShippingCompany", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("ShippingCompanies");
                });

            modelBuilder.Entity("EntityLayer.Concrete.UserTables.Gender", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ID");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Kadın"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Erkek"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.UserTables.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("GenderID")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("GenderID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ayşe",
                            GenderID = 1,
                            LastName = "Yılmaz",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = false,
                            UserName = "ayseyılmaz"
                        },
                        new
                        {
                            ID = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ceyda",
                            GenderID = 1,
                            LastName = "Yıldıl",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = false,
                            UserName = "ceydayıldız"
                        },
                        new
                        {
                            ID = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ali",
                            GenderID = 2,
                            LastName = "Güneş",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = false,
                            UserName = "aligünes"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.AddressTables.City", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AddressTables.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryID");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AddressTables.District", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AddressTables.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityID");

                    b.Navigation("City");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AddressTables.Quarter", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AddressTables.District", "District")
                        .WithMany("Quarters")
                        .HasForeignKey("DistrictID");

                    b.Navigation("District");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AddressTables.UserAddress", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AddressTables.Quarter", "Quarter")
                        .WithMany("UserAddresses")
                        .HasForeignKey("QuarterID");

                    b.HasOne("EntityLayer.Concrete.UserTables.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserID");

                    b.Navigation("Quarter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CommentRatingTables.ProductComment", b =>
                {
                    b.HasOne("EntityLayer.Concrete.CommentRatingTables.ProductRating", "ProductRating")
                        .WithMany("ProductComments")
                        .HasForeignKey("ProductRatingID");

                    b.Navigation("ProductRating");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CommentRatingTables.ProductRating", b =>
                {
                    b.HasOne("EntityLayer.Concrete.ProductTables.Product", "Product")
                        .WithMany("ProductRatings")
                        .HasForeignKey("ProductID");

                    b.HasOne("EntityLayer.Concrete.CommentRatingTables.RatingType", "RatingType")
                        .WithMany("ProductRatings")
                        .HasForeignKey("RatingTypeID");

                    b.HasOne("EntityLayer.Concrete.UserTables.User", "User")
                        .WithMany("ProductRatings")
                        .HasForeignKey("UserID");

                    b.Navigation("Product");

                    b.Navigation("RatingType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CommentRatingTables.SellerComment", b =>
                {
                    b.HasOne("EntityLayer.Concrete.CommentRatingTables.SellerRating", "SellerRating")
                        .WithMany("SellerComments")
                        .HasForeignKey("SellerRatingID");

                    b.Navigation("SellerRating");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CommentRatingTables.SellerRating", b =>
                {
                    b.HasOne("EntityLayer.Concrete.OrderTables.Order", "Order")
                        .WithMany("SellerRatings")
                        .HasForeignKey("OrderID");

                    b.HasOne("EntityLayer.Concrete.CommentRatingTables.RatingType", "RatingType")
                        .WithMany("SellerRatings")
                        .HasForeignKey("RatingTypeID");

                    b.HasOne("EntityLayer.Concrete.UserTables.User", "User")
                        .WithMany("SellerRatings")
                        .HasForeignKey("UserID");

                    b.Navigation("Order");

                    b.Navigation("RatingType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Favorites.Favorite", b =>
                {
                    b.HasOne("EntityLayer.Concrete.ProductTables.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductID");

                    b.HasOne("EntityLayer.Concrete.UserTables.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Concrete.OrderTables.CartDetail", b =>
                {
                    b.HasOne("EntityLayer.Concrete.ProductTables.Product", "Product")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductID");

                    b.HasOne("EntityLayer.Concrete.UserTables.User", "User")
                        .WithMany("CartDetails")
                        .HasForeignKey("UserID");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Concrete.OrderTables.Order", b =>
                {
                    b.HasOne("EntityLayer.Concrete.OrderTables.OrderStatusType", "OrderStatusType")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusTypeID");

                    b.HasOne("EntityLayer.Concrete.AddressTables.UserAddress", "UserAddress")
                        .WithMany("Orders")
                        .HasForeignKey("UserAddressID");

                    b.HasOne("EntityLayer.Concrete.UserTables.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID");

                    b.Navigation("OrderStatusType");

                    b.Navigation("User");

                    b.Navigation("UserAddress");
                });

            modelBuilder.Entity("EntityLayer.Concrete.OrderTables.OrderDetail", b =>
                {
                    b.HasOne("EntityLayer.Concrete.OrderTables.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID");

                    b.HasOne("EntityLayer.Concrete.ProductTables.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PaymentTables.Payment", b =>
                {
                    b.HasOne("EntityLayer.Concrete.PaymentTables.PaymentType", "PaymentType")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeID");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PaymentTables.PaymentOfOrder", b =>
                {
                    b.HasOne("EntityLayer.Concrete.OrderTables.Order", "Order")
                        .WithMany("PaymentOrders")
                        .HasForeignKey("OrderID");

                    b.HasOne("EntityLayer.Concrete.PaymentTables.Payment", "Payment")
                        .WithMany("PaymentOrders")
                        .HasForeignKey("PaymentID");

                    b.Navigation("Order");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ProductTables.CategoryOfProduct", b =>
                {
                    b.HasOne("EntityLayer.Concrete.ProductTables.Category", "Category")
                        .WithMany("CategoryOfProducts")
                        .HasForeignKey("CategoryID");

                    b.HasOne("EntityLayer.Concrete.ProductTables.Product", "Product")
                        .WithMany("CategoryOfProducts")
                        .HasForeignKey("ProductID");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ProductTables.ProductImage", b =>
                {
                    b.HasOne("EntityLayer.Concrete.ProductTables.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductID");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ProductTables.ProductVideo", b =>
                {
                    b.HasOne("EntityLayer.Concrete.ProductTables.Product", "Product")
                        .WithMany("ProductVideos")
                        .HasForeignKey("ProductID");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ProductTabless.ProductAttribute", b =>
                {
                    b.HasOne("EntityLayer.Concrete.ProductTables.Product", "Product")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductID");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EntityLayer.Concrete.SellerTables.Seller", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AddressTables.UserAddress", "UserAddress")
                        .WithMany("Sellers")
                        .HasForeignKey("UserAddressID");

                    b.HasOne("EntityLayer.Concrete.UserTables.User", "User")
                        .WithMany("Sellers")
                        .HasForeignKey("UserID");

                    b.Navigation("User");

                    b.Navigation("UserAddress");
                });

            modelBuilder.Entity("EntityLayer.Concrete.SellerTables.SellerOfProduct", b =>
                {
                    b.HasOne("EntityLayer.Concrete.ProductTables.Product", "Product")
                        .WithMany("ProductSellers")
                        .HasForeignKey("ProductID");

                    b.HasOne("EntityLayer.Concrete.SellerTables.Seller", "Seller")
                        .WithMany("ProductSellers")
                        .HasForeignKey("SellerID");

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ShippingTables.Shipping", b =>
                {
                    b.HasOne("EntityLayer.Concrete.OrderTables.Order", "Order")
                        .WithMany("Shippings")
                        .HasForeignKey("OrderID");

                    b.HasOne("EntityLayer.Concrete.ShippingTables.ShippingCompany", "ShippingCompany")
                        .WithMany("Shippings")
                        .HasForeignKey("ShippingCompanyID");

                    b.Navigation("Order");

                    b.Navigation("ShippingCompany");
                });

            modelBuilder.Entity("EntityLayer.Concrete.UserTables.User", b =>
                {
                    b.HasOne("EntityLayer.Concrete.UserTables.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderID");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AddressTables.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AddressTables.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AddressTables.District", b =>
                {
                    b.Navigation("Quarters");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AddressTables.Quarter", b =>
                {
                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AddressTables.UserAddress", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CommentRatingTables.ProductRating", b =>
                {
                    b.Navigation("ProductComments");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CommentRatingTables.RatingType", b =>
                {
                    b.Navigation("ProductRatings");

                    b.Navigation("SellerRatings");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CommentRatingTables.SellerRating", b =>
                {
                    b.Navigation("SellerComments");
                });

            modelBuilder.Entity("EntityLayer.Concrete.OrderTables.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("PaymentOrders");

                    b.Navigation("SellerRatings");

                    b.Navigation("Shippings");
                });

            modelBuilder.Entity("EntityLayer.Concrete.OrderTables.OrderStatusType", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PaymentTables.Payment", b =>
                {
                    b.Navigation("PaymentOrders");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PaymentTables.PaymentType", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ProductTables.Category", b =>
                {
                    b.Navigation("CategoryOfProducts");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ProductTables.Product", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("CategoryOfProducts");

                    b.Navigation("Favorites");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductAttributes");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductRatings");

                    b.Navigation("ProductSellers");

                    b.Navigation("ProductVideos");
                });

            modelBuilder.Entity("EntityLayer.Concrete.SellerTables.Seller", b =>
                {
                    b.Navigation("ProductSellers");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ShippingTables.ShippingCompany", b =>
                {
                    b.Navigation("Shippings");
                });

            modelBuilder.Entity("EntityLayer.Concrete.UserTables.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EntityLayer.Concrete.UserTables.User", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("Favorites");

                    b.Navigation("Orders");

                    b.Navigation("ProductRatings");

                    b.Navigation("SellerRatings");

                    b.Navigation("Sellers");

                    b.Navigation("UserAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
